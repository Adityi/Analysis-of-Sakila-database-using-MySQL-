### Create a stored procedure to get the category of a movie.

delimiter %
create procedure get_category_names (in movie_name varchar(50))

begin
select c.name as category_name
from category c
join film_category
using(category_id)
join film
using(film_id)
where film.title = movie_name;

end %
delimiter ;


call get_category_names("core suit");

### Create a stored procedure to get total rentals and average sales for a customer, aslo the category as <100 = Silver, between 100 and 150 = Gold, and above 150 as Platinum.

delimiter %
CREATE PROCEDURE `customer_detail`(in customer_name varchar(100),
out Total_Rentals int,
out Net_Sales float,
out customer_category varchar(10))
BEGIN

select count(distinct rental_id) into Total_rentals
from customer
join rental
using(customer_id)
where concat(first_name," ",last_name) = customer_name;

select round(sum(amount),2) into Net_Sales
from customer
join payment
using(customer_id)
where concat(first_name," ",last_name) = customer_name;

case
when net_sales < 100 then set customer_category =  "Silver";
when net_sales between 100 and 200 then set customer_category = "Gold";
When net_sales > 200 then set customer_category = "Platinum";
end case; 


END %
delimiter ;

## A stored procedure to find total rentals and sales of a film using film_id.

delimiter %
create procedure film_details (in id int, 
out Total_sales int,
out total_rentals int)

Begin

select count(distinct(rental_id)) into total_rentals
from film f
join inventory i 
on f.film_id = i.film_id and f.film_id = id
join rental using(inventory_id)
group by f.film_id;

select sum(amount) into Total_Sales
from film f
join inventory i 
on f.film_id = i.film_id and f.film_id = id
join rental using(inventory_id)
join payment using(rental_id)
group by f.film_id;

end %

delimiter ; 





